{
  "components": {
    "responses": {
      "APIError": {
        "content": {
          "application/json": {
            "schema": {
              "externalDocs": {
                "url": "https://pkg.go.dev/encore.dev/beta/errs#Error"
              },
              "properties": {
                "code": {
                  "description": "Error code",
                  "example": "not_found",
                  "externalDocs": {
                    "url": "https://pkg.go.dev/encore.dev/beta/errs#ErrCode"
                  },
                  "type": "string"
                },
                "details": {
                  "description": "Error details",
                  "type": "object"
                },
                "message": {
                  "description": "Error message",
                  "type": "string"
                }
              },
              "title": "APIError",
              "type": "object"
            }
          }
        },
        "description": "Error response"
      }
    },
    "schemas": {
      "article.ArticleResponse": {
        "properties": {
          "author": {
            "$ref": "#/components/schemas/user.GetUserResponse"
          },
          "author_id": {
            "title": "ID of the author\n",
            "type": "string"
          },
          "created_at": {
            "title": "Date the article was created\n",
            "type": "string"
          },
          "deleted_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "nullable": true,
                "type": "boolean"
              }
            ],
            "nullable": true,
            "title": "Date the article was deleted\n"
          },
          "description": {
            "title": "Description of the article\n",
            "type": "string"
          },
          "id": {
            "title": "ID of the article\n",
            "type": "string"
          },
          "image_bucket_key": {
            "title": "Bucket key of the article image\n",
            "type": "string"
          },
          "image_url": {
            "title": "Public URL of the article image\n",
            "type": "string"
          },
          "status": {
            "enum": [
              "draft",
              "published",
              "archived"
            ],
            "title": "Status of the article\n",
            "type": "string"
          },
          "title": {
            "title": "Title of the article\n",
            "type": "string"
          },
          "updated_at": {
            "title": "Date the article was last updated\n",
            "type": "string"
          }
        },
        "required": [
          "author",
          "id",
          "title",
          "description",
          "status",
          "author_id",
          "created_at",
          "updated_at",
          "deleted_at"
        ],
        "type": "object"
      },
      "user.GetUserResponse": {
        "properties": {
          "email": {
            "title": "Email of the user\n",
            "type": "string"
          },
          "id": {
            "title": "ID of the user\n",
            "type": "string"
          },
          "name": {
            "title": "Name of the user\n",
            "type": "string"
          },
          "picture": {
            "title": "Public URL of the user's profile picture\n",
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "picture"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "description": "Generated by encore",
    "title": "API for encore-demo-2hy2",
    "version": "1",
    "x-logo": {
      "altText": "Encore logo",
      "backgroundColor": "#EEEEE1",
      "url": "https://encore.dev/assets/branding/logo/logo-black.png"
    }
  },
  "openapi": "3.0.0",
  "paths": {
    "/article.sendPublishedArticlesCount": {
      "post": {
        "operationId": "POST:article.sendPublishedArticlesCount",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        }
      }
    },
    "/article/upload": {
      "post": {
        "operationId": "POST:article.upload",
        "responses": {
          "200": {
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        },
        "summary": "Handles file uploads for article photos\n"
      }
    },
    "/articles": {
      "get": {
        "operationId": "GET:article.list",
        "parameters": [
          {
            "allowEmptyValue": true,
            "description": "Whether to include deleted articles\n",
            "explode": true,
            "in": "query",
            "name": "includeDeleted",
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "description": "Status of the articles to include\n",
            "explode": true,
            "in": "query",
            "name": "status",
            "schema": {
              "enum": [
                "draft",
                "published",
                "archived"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "description": "Limit the number of articles to return\n",
            "explode": true,
            "in": "query",
            "name": "limit",
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    10
                  ],
                  "format": "int64",
                  "type": "integer"
                },
                {
                  "type": "number"
                }
              ]
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "description": "Offset the number of articles to return\n",
            "explode": true,
            "in": "query",
            "name": "offset",
            "schema": {
              "anyOf": [
                {
                  "enum": [
                    0
                  ],
                  "format": "int64",
                  "type": "integer"
                },
                {
                  "type": "number"
                }
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "articles": {
                      "items": {
                        "$ref": "#/components/schemas/article.ArticleResponse"
                      },
                      "title": "Articles\n",
                      "type": "array"
                    }
                  },
                  "required": [
                    "articles"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        },
        "summary": "Lists articles based on filters\n"
      },
      "post": {
        "operationId": "POST:article.create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "author_id": {
                    "title": "ID of the author\n",
                    "type": "string"
                  },
                  "description": {
                    "title": "Description of the article\n",
                    "type": "string"
                  },
                  "image_bucket_key": {
                    "title": "Bucket key of the article image\n",
                    "type": "string"
                  },
                  "image_url": {
                    "title": "Public URL of the article image\n",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title of the article\n",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "description",
                  "author_id"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "title": "ID of the article\n",
                      "type": "string"
                    },
                    "message": {
                      "title": "Message of the response\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        },
        "summary": "Creates an article\n"
      }
    },
    "/articles/count": {
      "get": {
        "operationId": "GET:article.count",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "title": "Count of published articles\n",
                      "type": "number"
                    }
                  },
                  "required": [
                    "count"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        },
        "summary": "Counts the number of published articles\n"
      }
    },
    "/articles/{id}": {
      "delete": {
        "operationId": "DELETE:article.remove",
        "parameters": [
          {
            "allowEmptyValue": true,
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "title": "Message of the response\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        },
        "summary": "Deletes an article\n"
      },
      "get": {
        "operationId": "GET:article.get",
        "parameters": [
          {
            "allowEmptyValue": true,
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "author": {
                      "$ref": "#/components/schemas/user.GetUserResponse"
                    },
                    "author_id": {
                      "title": "ID of the author\n",
                      "type": "string"
                    },
                    "created_at": {
                      "title": "Date the article was created\n",
                      "type": "string"
                    },
                    "deleted_at": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "nullable": true,
                          "type": "boolean"
                        }
                      ],
                      "nullable": true,
                      "title": "Date the article was deleted\n"
                    },
                    "description": {
                      "title": "Description of the article\n",
                      "type": "string"
                    },
                    "id": {
                      "title": "ID of the article\n",
                      "type": "string"
                    },
                    "image_bucket_key": {
                      "title": "Bucket key of the article image\n",
                      "type": "string"
                    },
                    "image_url": {
                      "title": "Public URL of the article image\n",
                      "type": "string"
                    },
                    "status": {
                      "enum": [
                        "draft",
                        "published",
                        "archived"
                      ],
                      "title": "Status of the article\n",
                      "type": "string"
                    },
                    "title": {
                      "title": "Title of the article\n",
                      "type": "string"
                    },
                    "updated_at": {
                      "title": "Date the article was last updated\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "author",
                    "id",
                    "title",
                    "description",
                    "status",
                    "author_id",
                    "created_at",
                    "updated_at",
                    "deleted_at"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        },
        "summary": "Gets an article\n"
      },
      "put": {
        "operationId": "PUT:article.update",
        "parameters": [
          {
            "allowEmptyValue": true,
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "title": "Description of the article\n",
                    "type": "string"
                  },
                  "image_bucket_key": {
                    "title": "Bucket key of the article image\n",
                    "type": "string"
                  },
                  "image_url": {
                    "title": "Public URL of the article image\n",
                    "type": "string"
                  },
                  "title": {
                    "title": "Title of the article\n",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "description"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "title": "Message of the response\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        },
        "summary": "Updates an article\n"
      }
    },
    "/articles/{id}/publish": {
      "post": {
        "operationId": "POST:article.publish",
        "parameters": [
          {
            "allowEmptyValue": true,
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "title": "Message of the response\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        },
        "summary": "Publishes an article\n"
      }
    },
    "/email/send": {
      "post": {
        "operationId": "POST:email.sendEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "items": {
                      "type": "string"
                    },
                    "title": "Email addresses to send the email to\n",
                    "type": "array"
                  },
                  "html": {
                    "title": "HTML content of the email\n",
                    "type": "string"
                  },
                  "subject": {
                    "title": "Subject of the email\n",
                    "type": "string"
                  },
                  "text": {
                    "title": "Text content of the email\n",
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "subject",
                  "html",
                  "text"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "title": "ID of the email\n",
                      "type": "string"
                    },
                    "success": {
                      "title": "Whether the email was sent successfully\n",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        },
        "summary": "Send an email\n"
      }
    },
    "/google-chat/send-message": {
      "post": {
        "operationId": "POST:google_chat.sendMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "message": {
                    "title": "Message to send\n",
                    "type": "string"
                  }
                },
                "required": [
                  "message"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "success": {
                      "title": "Whether the message was sent successfully\n",
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "success"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        },
        "summary": "Send a message to google chat\n"
      }
    },
    "/user.cleanupExpiredSessions": {
      "post": {
        "operationId": "POST:user.cleanupExpiredSessions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        }
      }
    },
    "/users/create": {
      "post": {
        "operationId": "POST:user.createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "title": "Email of the user\n",
                    "type": "string"
                  },
                  "googleId": {
                    "title": "Google ID of the user\n",
                    "type": "string"
                  },
                  "name": {
                    "title": "Name of the user\n",
                    "type": "string"
                  },
                  "picture": {
                    "title": "Public URL of the user's profile picture\n",
                    "type": "string"
                  }
                },
                "required": [
                  "googleId",
                  "email",
                  "name",
                  "picture"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "id": {
                      "title": "ID of the user\n",
                      "type": "string"
                    },
                    "message": {
                      "title": "Message of the response\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "message"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        }
      }
    },
    "/users/get-from-google-id/{googleId}": {
      "get": {
        "operationId": "GET:user.getUserFromGoogleId",
        "parameters": [
          {
            "allowEmptyValue": true,
            "explode": false,
            "in": "path",
            "name": "googleId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "email": {
                      "title": "Email of the user\n",
                      "type": "string"
                    },
                    "id": {
                      "title": "ID of the user\n",
                      "type": "string"
                    },
                    "name": {
                      "title": "Name of the user\n",
                      "type": "string"
                    },
                    "picture": {
                      "title": "Public URL of the user's profile picture\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "email",
                    "name",
                    "picture"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        }
      }
    },
    "/users/sessions": {
      "post": {
        "operationId": "POST:user.createSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "expiresAt": {
                    "format": "date-time",
                    "title": "Expiration date of the session\n",
                    "type": "string"
                  },
                  "userId": {
                    "title": "ID of the user\n",
                    "type": "string"
                  }
                },
                "required": [
                  "userId",
                  "expiresAt"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdAt": {
                      "format": "date-time",
                      "title": "Date the session was created\n",
                      "type": "string"
                    },
                    "expiresAt": {
                      "format": "date-time",
                      "title": "Expiration date of the session\n",
                      "type": "string"
                    },
                    "id": {
                      "title": "ID of the session\n",
                      "type": "string"
                    },
                    "updatedAt": {
                      "format": "date-time",
                      "title": "Date the session was last updated\n",
                      "type": "string"
                    },
                    "userId": {
                      "title": "ID of the user\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "userId",
                    "expiresAt",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        }
      }
    },
    "/users/sessions/{id}": {
      "delete": {
        "operationId": "DELETE:user.deleteSession",
        "parameters": [
          {
            "allowEmptyValue": true,
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        }
      },
      "get": {
        "operationId": "GET:user.getSession",
        "parameters": [
          {
            "allowEmptyValue": true,
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "createdAt": {
                      "format": "date-time",
                      "title": "Date the session was created\n",
                      "type": "string"
                    },
                    "expiresAt": {
                      "format": "date-time",
                      "title": "Expiration date of the session\n",
                      "type": "string"
                    },
                    "id": {
                      "title": "ID of the session\n",
                      "type": "string"
                    },
                    "updatedAt": {
                      "format": "date-time",
                      "title": "Date the session was last updated\n",
                      "type": "string"
                    },
                    "userId": {
                      "title": "ID of the user\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "userId",
                    "expiresAt",
                    "createdAt",
                    "updatedAt"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        }
      }
    },
    "/users/sessions/{id}/update-expiration": {
      "post": {
        "operationId": "POST:user.updateSessionExpiration",
        "parameters": [
          {
            "allowEmptyValue": true,
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "expiresAt": {
                    "format": "date-time",
                    "title": "Expiration date of the session\n",
                    "type": "string"
                  }
                },
                "required": [
                  "expiresAt"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "GET:user.getUser",
        "parameters": [
          {
            "allowEmptyValue": true,
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "email": {
                      "title": "Email of the user\n",
                      "type": "string"
                    },
                    "id": {
                      "title": "ID of the user\n",
                      "type": "string"
                    },
                    "name": {
                      "title": "Name of the user\n",
                      "type": "string"
                    },
                    "picture": {
                      "title": "Public URL of the user's profile picture\n",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "email",
                    "name",
                    "picture"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Success response"
          },
          "default": {
            "$ref": "#/components/responses/APIError"
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "Encore local dev environment",
      "url": "https://api.staging.eu.grpn.supro-nivelo.com/"
    }
  ]
}
